{"version":3,"sources":["trash.png","logo.svg","List.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","List","props","items","deleteItem","listItems","map","item","className","key","id","text","src","trash","alt","onClick","App","handleInput","event","setState","currentItem","target","value","Date","now","handleClick","state","newItem","total","remind","filter","type","placeholder","this","onChange","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"0FAAAA,EAAOC,QAAU,IAA0B,mC,0ECA3CD,EAAOC,QAAU,IAA0B,kC,2LCgB5BC,MAbf,SAAcC,GAAO,IACVC,EAAoBD,EAApBC,MAAMC,EAAcF,EAAdE,WACPC,EAAYF,EAAMG,KAAI,SAACC,GAC7B,OAAM,yBAAKC,UAAU,OAAOC,IAAKF,EAAKE,KAClC,uBAAGC,GAAG,UAAUH,EAAKI,KACrB,yBAAKC,IAAKC,IAAOC,IAAI,QAAQJ,GAAG,QAAQK,QAAS,kBAAMX,EAAWG,EAAKE,aAM3E,OAAO,6BAAMJ,IC6CFW,E,kDArDb,WAAYd,GAAO,IAAD,8BAChB,cAAMA,IAURe,YAAc,SAACC,GACb,EAAKC,SAAS,CACZC,YAAY,CACVT,KAAKO,EAAMG,OAAOC,MAClBb,IAAIc,KAAKC,UAfG,EAmBlBC,YAAc,WAEZ,GAAmC,KAAhC,EAAKC,MAAMN,YAAYT,KAAY,CAEpC,IAAIgB,EAAU,EAAKD,MAAMN,YACnBQ,EAAQ,EAAKF,MAAMvB,MAC1B,EAAKgB,SAAS,CACZhB,MAAM,GAAD,mBAAKyB,GAAL,CAAWD,IAChBP,YAAY,CACVT,KAAK,GACLF,IAAI,QA7BO,EAkClBL,WAAa,SAACK,GACZ,IAAMoB,EAAS,EAAKH,MAAMvB,MAAM2B,QAAO,SAAAvB,GAAI,OAAIE,IAAQF,EAAKE,OAC5D,EAAKU,SAAS,CACZhB,MAAM0B,KAnCR,EAAKH,MAAQ,CACXvB,MAAM,GACNiB,YAAY,CACVT,KAAK,GACLF,IAAI,KANQ,E,qDAyChB,OACE,yBAAKD,UAAU,OACb,2BAAOuB,KAAK,OACZC,YAAY,aACZV,MAAOW,KAAKP,MAAMN,YAAYT,KAC9BuB,SAAUD,KAAKhB,cACf,4BAAQF,QAASkB,KAAKR,aAAtB,SACA,kBAAC,EAAD,CAAMtB,MAAO8B,KAAKP,MAAMvB,MAAOC,WAAY6B,KAAK7B,kB,GAjDtC+B,aCOEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.760053f5.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/trash.2c3e6019.png\";","module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from 'react' \nimport './List.css'\nimport trash from \"./trash.png\"\nfunction List(props){\n    const {items,deleteItem} = props\n    const listItems = items.map((item)=>{\n    return<div className=\"item\" key={item.key}>\n        <p id=\"item-p\">{item.text}\n        <img src={trash} alt=\"trash\" id=\"trach\" onClick={() => deleteItem(item.key)}/>\n        </p>\n        \n        </div>\n    })\n   \n    return <div>{listItems}</div>\n}\nexport default List ","import React,{Component} from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport List from './List';\n\nclass App extends Component{\n  constructor(props){\n    super(props)\n    this.state = {\n      items:[],\n      currentItem:{\n        text:\"\",\n        key:\"\"\n      }\n\n    }\n  }\n  handleInput = (event) =>{\n    this.setState({\n      currentItem:{\n        text:event.target.value,\n        key:Date.now()\n      }\n    })\n  }\n  handleClick = () =>{\n   \n    if(this.state.currentItem.text !== \"\"){\n     \n      let newItem = this.state.currentItem\n      const total = this.state.items\n     this.setState({\n       items:[...total,newItem],\n       currentItem:{\n         text:\"\",\n         key:\"\"\n       }\n     })\n  }\n}\n  deleteItem = (key) =>{\n    const remind = this.state.items.filter(item => key !== item.key)\n    this.setState({\n      items:remind\n    })\n  }\n  render(){\n    return(\n      <div className=\"App\">\n        <input type=\"text\" \n        placeholder=\"Enter text\"\n        value={this.state.currentItem.text}\n        onChange={this.handleInput}/> \n        <button onClick={this.handleClick}>Enter</button>\n        <List items={this.state.items} deleteItem={this.deleteItem}/>\n      </div>\n    )\n  }\n}\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}